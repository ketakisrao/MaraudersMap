{"version":3,"sources":["Map/Maps.js","App.js","Places/Place.js","Characters/Character.js","serviceWorker.js","index.js"],"names":["items","name","position","top","left","link","img","right","bottom","maps","props","c","map","item","className","style","key","to","process","src","alt","App","Maps","Component","Place","id","useParams","character","Boolean","window","location","hostname","match","routing","exact","path","children","PUBLIS_URL","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iXAKaA,EAAQ,CAAC,CAClBC,KAAM,kBACNC,SAAU,CACNC,IAAK,QACLC,KAAM,SAEVC,KAAM,mBACNC,IAAK,uBACN,CACCL,KAAM,YACNC,SAAU,CACNC,IAAK,OACLC,KAAM,QAEVE,IAAK,wBAET,CACIL,KAAM,mBACNC,SAAU,CACNC,IAAK,OACLI,MAAO,QAEXD,IAAK,8BAET,CACIL,KAAM,aACNC,SAAU,CACNM,OAAQ,OACRJ,KAAM,QAEVE,IAAK,wBAET,CACIL,KAAM,eACNC,SAAU,CACNM,OAAQ,OACRD,MAAO,QAEXD,IAAK,yBAET,CACIL,KAAM,sBACNC,SAAU,CACNM,OAAQ,MACRJ,KAAM,SAEVE,IAAK,kCAgBMG,EAbF,SAAAC,GACT,IAAIC,EAAI,EASR,OARkBX,EAAMY,KAAI,SAACC,GACzB,OACI,yBAAKC,UAAU,WAAWC,MAAOF,EAAKX,SAAUc,IAAKL,KACjD,kBAAC,IAAD,CAAMM,GAAIC,gBAAyBL,EAAKR,MAAM,yBAAKc,IAAKN,EAAKP,IAAKc,IAAKP,EAAKP,OAC5E,4BAAKO,EAAKZ,WC9CXoB,G,uLAPP,OACI,yBAAKP,UAAU,QACX,kBAACQ,EAAD,W,GAJEC,c,eCWHC,MAVf,WAAkB,IACRC,EAAOC,cAAPD,GAEN,OACI,yBAAKX,UAAU,IACX,sCAAYW,GACZ,2BAAIzB,EAAM,GAAGC,QCFV0B,G,MAPG,SAAAjB,GACd,OACA,yBAAKI,UAAU,IACX,6CCMYc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,IAAMC,EACF,6BACI,6BACI,kBAAC,IAAD,KACI,yBAAKnB,UAAU,OACX,wBAAIA,UAAU,SAAd,qBACA,4BACI,4BAAI,kBAAC,IAAD,CAAMG,GAAIC,kBAAV,WACJ,4BAAI,kBAAC,IAAD,CAAMD,GAAIC,iCAAV,eACJ,4BAAI,kBAAC,IAAD,CAAMD,GAAIC,iCAAV,yBAIZ,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAMjB,kBAA8B,kBAAC,EAAD,OACjD,kBAAC,IAAD,CAAOgB,OAAK,EAACC,KAAMjB,iCAA6C,kBAAC,EAAD,OAChE,kBAAC,IAAD,CAAOiB,KAAK,OAAOC,SAAU,kBAAC,EAAD,QAC7B,kBAAC,IAAD,CAAUnB,GAAIC,2DAAYmB,WAAa,UAM3DC,IAASC,OAAON,EAASO,SAASC,eAAe,SDgG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8d0d049c.chunk.js","sourcesContent":["import React from 'react';\nimport './Map.css';\nimport { Route, Link, Switch, BrowserRouter as Router, Redirect } from 'react-router-dom';\n\n\nexport const items = [{\n    name: \"Hogwarts Castle\",\n    position: {\n        top: \"100px\",\n        left: \"550px\"\n    },\n    link: '/hogwarts-castle',\n    img: \"images/Hogwarts.png\"\n}, {\n    name: \"Hogsmeade\",\n    position: {\n        top: \"50px\",\n        left: \"50px\"\n    },\n    img: \"images/Hogsmeade.jpg\"\n},\n{\n    name: \"Forbidden Forest\",\n    position: {\n        top: \"50px\",\n        right: \"50px\"\n    },\n    img: \"images/ForbiddenForest.png\"\n},\n{\n    name: \"Great Hall\",\n    position: {\n        bottom: \"50px\",\n        left: \"50px\"\n    },\n    img: \"images/GreatHall.jpg\"\n},\n{\n    name: \"Hagrid's Hut\",\n    position: {\n        bottom: \"50px\",\n        right: \"50px\"\n    },\n    img: \"images/HagridsHut.jpg\"\n},\n{\n    name: \"Dumbledore's Office\",\n    position: {\n        bottom: \"0px\",\n        left: \"600px\"\n    },\n    img: \"images/Dumbledore'sOffice.jpg\"\n}];\n\nconst maps = props => {\n    let c = 0;\n    const map_items = items.map((item) => {\n        return (\n            <div className=\"map-item\" style={item.position} key={c++}>\n                <Link to={process.env.PUBLIC_URL + item.link}><img src={item.img} alt={item.img}></img></Link>\n                <h3>{item.name}</h3>\n            </div>\n        )\n    });\n    return map_items;\n}\n\nexport default maps","import React, {Component} from 'react';\nimport Maps from './Map/Maps';\nimport './App.css';\n\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"back\">\n                <Maps></Maps>\n            </div>\n        );\n    }\n}\nexport default App;","import React from 'react';\nimport './Place.css';\nimport { Router, useParams } from \"react-router-dom\";\nimport { items } from '../Map/Maps';\n\n\nfunction Place() {\n    let { id } = useParams();\n    \n    return (\n        <div className=\"\">\n            <h2>Places {id}</h2>\n            <p>{items[0].name}</p>\n        </div>\n    );\n}\nexport default Place","import React from 'react';\nimport './Character.css';\n\nconst character = props => {\n    return (\n    <div className=\"\">\n        <h2>Characters</h2>\n    </div>\n    );\n}\nexport default character","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport Place from './Places/Place'\nimport Character from './Characters/Character';\nimport { Route, Link, Switch, BrowserRouter as Router, Redirect } from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst routing = (\n    <div>\n        <div>\n            <Router>\n                <div className=\"nav\">\n                    <h1 className=\"brand\">The Marauders Map</h1>\n                    <ul>\n                        <li><Link to={process.env.PUBLIC_URL + '/'}>Places</Link></li>\n                        <li><Link to={process.env.PUBLIC_URL + '/wizardsnwitches'}>Characters</Link></li>\n                        <li><Link to={process.env.PUBLIC_URL + '/wizardsnwitches'}>Bertie Botts Beans</Link></li>\n                    </ul>\n                </div>\n\n                <Switch>\n                    <Route exact path={process.env.PUBLIC_URL + '/'}><App /></Route>\n                    <Route exact path={process.env.PUBLIC_URL + '/wizardsnwitches'}><Character /></Route>\n                    <Route path=\"/:id\" children={<Place />} />\n                    <Redirect to={process.env.PUBLIS_URL + '/'} />\n                </Switch>\n            </Router>\n        </div>\n    </div>\n);\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}